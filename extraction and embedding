from flask import Flask, request, jsonify
from flask_restful import Api, Resource
import os
import numpy as np
import google.generativeai as genai
from langchain.document_loaders import WebBaseLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores.faiss import FAISS

app = Flask(your_flask_file)
api = Api(app)

# Load and preprocess documents once at startup
url = "https://brainlox.com/courses/category/technical"
loader = WebBaseLoader([url])
documents = loader.load()

# Split documents into manageable chunks
text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=0)
docs = text_splitter.split_documents(documents)

# Set your Google Generative AI API key
gen_ai_key = "AIzaSyAhU_PC7CzihSUyq61BWVEszhD9HWSlm1s"  # Replace with your actual API key
genai.configure(api_key=gen_ai_key)

# Generate embeddings for the document chunks
embeddings = []
document_texts = []

for doc in docs:
    try:
        result = genai.embed_content(
            model="models/text-embedding-004",
            content=doc.page_content,
            task_type="retrieval_document",
            title="Title"
        )
        embeddings.append(result['embedding'])
        document_texts.append(doc.page_content)
    except Exception as e:
        print(f"Error embedding document: {e}")

# Initialize FAISS vector store from texts and embeddings
index = FAISS.from_texts(texts=document_texts, embedding=embeddings)

class Query(Resource):
    def post(self):
        try:
            data = request.get_json()
            query = data.get('query')
            if not query:
                return {'error': 'Query is required'}, 400

            # Embed the query
            query_embedding = genai.embed_content(
                model="models/text-embedding-004",
                content=query,
                task_type="retrieval_document"
            )['embedding']

            # Perform similarity search in FAISS
            docs_and_scores = index.similarity_search_by_vector(np.array(query_embedding), k=3)

            # Format results for response
            results = [{'score': score, 'document': doc} for doc, score in docs_and_scores]
            return jsonify(results)

        except Exception as e:
            return {'error': str(e)}, 500

# Add the Query resource to the API
api.add_resource(Query, '/query')

if __name__ == '__main__':
    app.run(debug=True)

#run the app
python your_flask_file.py

# test url

curl -X POST http://127.0.0.1:5000/query -H "Content-Type: application/json" -d '{"query": "Mobile related development"}'

